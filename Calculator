public class Calculator {
    
    public static double power(double x, int exp){
        double total = 1;
        for (int i = 1; i <= exp; i++){
            total *= x;
        }
        return total;
    }

    public static double absoluteValue(double x){
        if (x < 0){
            x *= -1;
        }
        return x;
    }

    public static double mod(double a, double b) {
        int add_negative = 0;
        if (a < 0) {
            add_negative = -1;
        }
        int floorDivision = (int) (a / b) + add_negative;
        return a - b * floorDivision;

    }

    public static double factorial(int n){
        if (n < 0){
            throw new IllegalArgumentException("Factorial of a number must be positive (for this calculator");
        }

        if (n == 0 || n == 1) {
            return 1;
        }
        return n * (factorial(n - 1));
    }

    public static double e(){
        int iterations = 1000;
        double total = 0;

        for (int i = 0; i <= iterations; i++){
            total += 1 / factorial(i);
        }

        return total;
    }

    public static double ln(double x){
        if (x < 0){
            throw new IllegalArgumentException("Argument must be a positive number for ln(x)");
        }
        // taylor series expansion of ln(x)
        double total = 0;
        for (int n = 0; n <= 1000; n++){
            total += Powers.power(((x - 1) / (x + 1)), 2 * n + 1) / (2 * n + 1);
        }

        return 2 * total;
    }

    public static double log(double base, double argument){
        if (base < 0 || argument < 0){
            throw new IllegalArgumentException("All parts of a logarithm must be positive");
        }
        //log base a of b = ln(a)/ln(b)
        return ln(base) / ln(argument);
    }


    public static double arcsin(double x) {
        double total = x;
        for (int i = 3; i <= 31; i += 2) {
            total += power(x, i) *  factorial(i-1) / (i * power(4,(i-1)/2) * power(factorial((i-1)/2),2));
        }
        return total;
    }

    public static double arctan(double x) {
        double total = 0.0;
        int neg = 1;
        for (int i = 1; i <= 31; i += 2) {
            total += (power(x, i) * neg) / i;
            neg *= -1;  // Alternate signs
        }

        return total;
    }

    public static double pi() {
        return 16*arctan((double) 1/5) - 4 * arctan((double) 1/239);

    }

    public static double arccos(double x){
        return  pi()/2 - arcsin(x);
    }

    public static double cos(double x) {
        return taylorExpansion(x, 100, false);
    }

    public static double sin(double x) {
        return taylorExpansion(x, 100, true);
    }

    public static double tan(double x){
        // tan = sin/cos
        return sin(x) / cos(x);
    }

    private static double taylorExpansion(double x, int iterations, boolean sin) {
        // uses taylor expansion to calculate sin and cos
        x = mod(x, (2 * pi()));
        double total = 0;
        int add_sin = sin ? 1 : 0;
        double denominator;

        for (int n = 0; n < iterations; n++) {
            denominator = factorial(2 * n + add_sin);
            double sum = power(x, (2 * n + add_sin)) / denominator;

            if (n % 2 == 0) {
                total += sum;
            } else {
                total -= sum;
            }
        }

        return total;
    }
    public static double sqrtNewton(double x) {
        if (x < 0){
            throw new IllegalArgumentException("Cannot do squareroot of a negative number");
        }
        // newton's square root finding method
        double guess = x / 2;
        double tolerance = 1e-15;

        while (absoluteValue(guess * guess - x) > tolerance) {
            guess = (guess + x / guess) / 2.0;
        }

        return guess;
    }

    public static void main(String[] args) {
        System.out.println(arctan(0.5));
    }
}
